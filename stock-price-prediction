import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
import yfinance as yf  # Import yfinance for fetching data

# 1. Data Acquisition and Preprocessing

# Instead of using a URL, use yfinance to fetch Apple stock data
data = yf.download('AAPL', start='2020-01-01', end='2021-01-01')  

# Select the 'Close' price column
close_prices = data['Close'].values.reshape(-1, 1)

# Normalize the data using MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(close_prices)

# Create sequences for LSTM input
def create_sequences(data, seq_length):
    xs = []
    ys = []
    for i in range(len(data) - seq_length):
        x = data[i:(i + seq_length)]
        y = data[i + seq_length]
        xs.append(x)
        ys.append(y)
    return np.array(xs), np.array(ys)

seq_length = 60  # Adjust this based on your data and desired prediction horizon
X, y = create_sequences(scaled_data, seq_length)

# Split data into training and testing sets
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# 2. Model Building

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mse')

# 3. Model Training

model.fit(X_train, y_train, batch_size=1, epochs=10)  # Adjust epochs as needed

# 4. Prediction and Evaluation

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)  # Inverse transform to get actual price

# Evaluate the model (e.g., using RMSE)
rmse = np.sqrt(np.mean(predictions - scaler.inverse_transform(y_test))**2)
print(f"RMSE: {rmse}")

# 5. Visualization (optional)

plt.plot(scaler.inverse_transform(y_test), label='Actual')
plt.plot(predictions, label='Predicted')
plt.legend()
plt.show()
